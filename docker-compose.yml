version: "3.9"
services:
  db:
    environment:
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD", "pg_isready"]
    image: "postgres:14-alpine"
    user: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  dialog:
    build:
      context: .
      dockerfile: dockerfiles/dialog.Dockerfile
    environment:
      AUTH_KEY: /etc/perms.pub.pem
      HTTPS_CERT_FULLCHAIN: /etc/ssl/fullchain.pem
      HTTPS_CERT_PRIVKEY: /etc/ssl/privkey.pem
      INTERACTIVE: "false"
      MEDIASOUP_MIN_PORT: 40000
      MEDIASOUP_MAX_PORT: 40050
      MEDIASOUP_ANNOUNCED_IP: ${PRIVATE_NETWORK_IP}
    ports:
      - "4443:4443"
      # This should be the same as MEDIASOUP_MIN_PORT and MEDIASOUP_MAX_PORT
      # You might neeed to increase this number depending on how many clients you are connecting.
      # (Keep the ports range small to improve container startup time)
      - "40000-40050:40000-40050"
      - "40000-40050:40000-40050/udp"
    volumes:
      - dialog:/code
    working_dir: /code
  hubs-admin:
    build:
      context: .
      dockerfile: dockerfiles/hubs.Dockerfile
    command: npm run local
    environment:
      INTERNAL_HOSTNAME: hubs-admin
    healthcheck:
      test: ["CMD", "curl", "-fk", "https://localhost:8989/admin.html"]
    platform: linux/amd64
    ports:
      - "8989:8989"
    volumes:
      - hubs:/code
    working_dir: /code/admin
    extra_hosts:
      - "hubs.local:host-gateway"
      - "hubs-proxy.local:host-gateway"
      - "host.docker.internal:host-gateway"
  hubs-client:
    build:
      context: .
      dockerfile: dockerfiles/hubs.Dockerfile
    command: npm run local
    environment:
      INTERNAL_HOSTNAME: hubs-client
    healthcheck:
      start_period: 3m30s
      test: ["CMD", "curl", "-fk", "https://localhost:8080"]
    platform: linux/amd64
    ports:
      - "8080:8080"
    volumes:
      - hubs:/code
    working_dir: /code
    extra_hosts:
      - "hubs.local:host-gateway"
      - "hubs-proxy.local:host-gateway"
      - "host.docker.internal:host-gateway"
  hubs-storybook:
    build:
      context: .
      dockerfile: dockerfiles/hubs.Dockerfile
    command: npm run storybook
    healthcheck:
      test: ["CMD", "curl", "-fk", "http://hubs.local:6006"]
    platform: linux/amd64
    ports:
      - "6006:6006"
    volumes:
      - hubs:/code
    working_dir: /code
  postgrest:
    build:
      context: .
      dockerfile: dockerfiles/postgrest.Dockerfile
  reticulum:
    build:
      context: ./services/reticulum
      dockerfile: TurkeyDockerfile
      target: dev
    depends_on:
      - db
    environment:
      DB_CREDENTIALS: postgres
      DB_HOST: db
      DIALOG_HOSTNAME: "hubs.local"
      DIALOG_PORT: 4443
      HUBS_ADMIN_INTERNAL_HOSTNAME: hubs-admin
      HUBS_CLIENT_INTERNAL_HOSTNAME: hubs-client
      POSTGREST_INTERNAL_HOSTNAME: postgrest
      SPOKE_INTERNAL_HOSTNAME: spoke
    ports:
      - "4000:4000"
    volumes:
      - reticulum:/code
      - retstorage:/code/storage/dev
    extra_hosts:
      - "hubs.local:host-gateway"
      - "hubs-proxy.local:host-gateway"
      - "host.docker.internal:host-gateway"
  spoke:
    build:
      context: .
      dockerfile: dockerfiles/spoke.Dockerfile
    environment:
      CORS_PROXY_SERVER: "hubs-proxy.local:4000"
      INTERNAL_HOSTNAME: spoke
    platform: linux/amd64
    ports:
      - "9090:9090"
    volumes:
      - spoke:/code
    extra_hosts:
      - "hubs.local:host-gateway"
      - "hubs-proxy.local:host-gateway"
      - "host.docker.internal:host-gateway"
networks:
  default:
    name: mozilla-hubs
volumes:
  dialog:
  hubs:
  pgdata:
  reticulum:
  retstorage:
  spoke:
x-mutagen:
  sync:
    defaults:
      ignore:
        paths:
          - ".DS_Store"
          - ".gitignore"
          - "/certs/"
          - "/node_modules/"
          - "package-lock.sha512"
        vcs: true
      mode: "two-way-resolved"
    dialog:
      alpha: ./services/dialog
      beta: "volume://dialog"
    hubs:
      alpha: ./services/hubs
      beta: "volume://hubs"
      ignore:
        paths:
          - "/admin/certs/"
          - "/admin/node_modules/"
    reticulum:
      alpha: ./services/reticulum
      beta: "volume://reticulum"
      ignore:
        paths:
          - "/_build/"
          - "/bin/"
          - "/storage/"
    spoke:
      alpha: ./services/spoke
      beta: "volume://spoke"
